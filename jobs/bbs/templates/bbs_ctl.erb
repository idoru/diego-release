#!/bin/bash -e

run_dir=/var/vcap/sys/run/bbs
log_dir=/var/vcap/sys/log/bbs
conf_dir=/var/vcap/jobs/bbs/config
tmp_dir=/var/vcap/data/bbs/tmp

pidfile=$run_dir/bbs.pid

source /var/vcap/packages/pid_utils/pid_utils.sh

case $1 in

  start)
    pid_guard $pidfile "bbs"

    mkdir -p $run_dir
    chown -R vcap:vcap $run_dir

    mkdir -p $log_dir
    chown -R vcap:vcap $log_dir

    mkdir -p $tmp_dir
    chown -R vcap:vcap $tmp_dir

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec chpst -u vcap:vcap bash -c  '/var/vcap/jobs/bbs/bin/bbs_as_vcap'

    ;;

  stop)
    kill_and_wait $pidfile

    ;;

  *)
    echo "Usage: bbs_ctl {start|stop}"

    ;;

esac
